{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"SafeCrypt SafeCrypt is a modern PHP library that simplifies the use of cryptography via OpenSSL. Currently SafeCrypt supports the following protocols : \ud83d\udd10 RSA (asymmetric) \ud83d\udd12 AES-GCM (symmetric, secure) \ud83c\udf00 ChaCha20-Poly1305 (Fast and Safe Symmetric) Tip \u2728 Ideal for developers who want to use cryptography without getting bogged down in the technical details of OpenSSL. See Installation to get started . \u2b50 Support the Project If you find SafeCrypt useful, please consider giving it a star \ud83c\udf1f on GitHub \u2013 your support means a lot!","title":"Introduction"},{"location":"index.html#safecrypt","text":"SafeCrypt is a modern PHP library that simplifies the use of cryptography via OpenSSL. Currently SafeCrypt supports the following protocols : \ud83d\udd10 RSA (asymmetric) \ud83d\udd12 AES-GCM (symmetric, secure) \ud83c\udf00 ChaCha20-Poly1305 (Fast and Safe Symmetric) Tip \u2728 Ideal for developers who want to use cryptography without getting bogged down in the technical details of OpenSSL. See Installation to get started .","title":"SafeCrypt"},{"location":"index.html#support-the-project","text":"If you find SafeCrypt useful, please consider giving it a star \ud83c\udf1f on GitHub \u2013 your support means a lot!","title":"\u2b50 Support the Project"},{"location":"installation.html","text":"\ud83d\udce6 Installing SafeCrypt Welcome to the installation section for SafeCrypt , your PHP cryptography library for simplified OpenSSL. \u2705 Prerequisites Before installing SafeCrypt, make sure your environment meets the following requirements: \u2705 PHP 8.4.7 or higher \u2705 OpenSSL extension enabled in php.ini \u2705 Composer installed ( Install Composer ) \ud83d\udce5 Installation via Composer To install SafeCrypt, use Composer : composer require tina-1300/safecrypt","title":"Installation"},{"location":"installation.html#installing-safecrypt","text":"Welcome to the installation section for SafeCrypt , your PHP cryptography library for simplified OpenSSL.","title":"\ud83d\udce6 Installing SafeCrypt"},{"location":"installation.html#prerequisites","text":"Before installing SafeCrypt, make sure your environment meets the following requirements: \u2705 PHP 8.4.7 or higher \u2705 OpenSSL extension enabled in php.ini \u2705 Composer installed ( Install Composer )","title":"\u2705 Prerequisites"},{"location":"installation.html#installation-via-composer","text":"To install SafeCrypt, use Composer : composer require tina-1300/safecrypt","title":"\ud83d\udce5 Installation via Composer"},{"location":"about/CHANGELOG.html","text":"\ud83d\udcdc Changelog All notable changes to this project will be documented here. The format is based on Keep a Changelog and versioning follows SemVer . [1.3.0] - 2025-06-22 Added Documentation ChaCha20-Poly1305 [1.2.0] - 2025-06-15 Added Implementation of the RSA asymmetric encryption protocol Key pair generation ( RSAKey ) Encryption, Decryption ( RSA ) Saving and loading keys ( RSASave , RSALoad ) [1.1.0] - 2025-06-10 Added Improvement on AES-256-GCM : Added a method to facilitate decryption [1.0.0] - 2025-06-10 Added First stable release Better error handling via CryptoException Implementation of the AES-256-GCM symmetric encryption: Random AES key generation Secure encryption and decryption with IV + tag Base64 support for encrypted messages","title":"Changelog"},{"location":"about/CHANGELOG.html#changelog","text":"All notable changes to this project will be documented here. The format is based on Keep a Changelog and versioning follows SemVer .","title":"\ud83d\udcdc Changelog"},{"location":"about/CHANGELOG.html#130-2025-06-22","text":"","title":"[1.3.0] - 2025-06-22"},{"location":"about/CHANGELOG.html#added","text":"Documentation ChaCha20-Poly1305","title":"Added"},{"location":"about/CHANGELOG.html#120-2025-06-15","text":"","title":"[1.2.0] - 2025-06-15"},{"location":"about/CHANGELOG.html#added_1","text":"Implementation of the RSA asymmetric encryption protocol Key pair generation ( RSAKey ) Encryption, Decryption ( RSA ) Saving and loading keys ( RSASave , RSALoad )","title":"Added"},{"location":"about/CHANGELOG.html#110-2025-06-10","text":"","title":"[1.1.0] - 2025-06-10"},{"location":"about/CHANGELOG.html#added_2","text":"Improvement on AES-256-GCM : Added a method to facilitate decryption","title":"Added"},{"location":"about/CHANGELOG.html#100-2025-06-10","text":"","title":"[1.0.0] - 2025-06-10"},{"location":"about/CHANGELOG.html#added_3","text":"First stable release Better error handling via CryptoException Implementation of the AES-256-GCM symmetric encryption: Random AES key generation Secure encryption and decryption with IV + tag Base64 support for encrypted messages","title":"Added"},{"location":"about/CODE_OF_CONDUCT.html","text":"Contributor Code of Conduct Our Commitment We are committed to providing a friendly, safe, and welcoming environment, regardless of age, body type, disability, ethnicity, etc. Our Standards Examples of positive behavior: - Use welcoming and inclusive language - Respect different points of view - Accept constructive criticism Reporting If you witness or experience inappropriate behavior, please contact us privately. Thank you for contributing to a healthy and respectful project!","title":"Code of conduct"},{"location":"about/CODE_OF_CONDUCT.html#contributor-code-of-conduct","text":"","title":"Contributor Code of Conduct"},{"location":"about/CODE_OF_CONDUCT.html#our-commitment","text":"We are committed to providing a friendly, safe, and welcoming environment, regardless of age, body type, disability, ethnicity, etc.","title":"Our Commitment"},{"location":"about/CODE_OF_CONDUCT.html#our-standards","text":"Examples of positive behavior: - Use welcoming and inclusive language - Respect different points of view - Accept constructive criticism","title":"Our Standards"},{"location":"about/CODE_OF_CONDUCT.html#reporting","text":"If you witness or experience inappropriate behavior, please contact us privately. Thank you for contributing to a healthy and respectful project!","title":"Reporting"},{"location":"about/FAQ.html","text":"FAQ - SafeCrypt 1. What version of php is required? The project uses php 8.4.7 or higher. 2. How do I install SafeCrypt? use of compose : composer require tina-1300/safecrypt 3. How can I contribute to the project? Read the CONTRIBUTING.md file for steps. 4. How do I report a bug or security vulnerability? See the SECURITY.md file for details on how to contact us securely. 5. What are the future plans for SafeCrypt? Check out our ROADMAP.md for planned features!","title":"FAQ"},{"location":"about/FAQ.html#faq-safecrypt","text":"","title":"FAQ - SafeCrypt"},{"location":"about/FAQ.html#1-what-version-of-php-is-required","text":"The project uses php 8.4.7 or higher.","title":"1. What version of php is required?"},{"location":"about/FAQ.html#2-how-do-i-install-safecrypt","text":"use of compose : composer require tina-1300/safecrypt","title":"2. How do I install SafeCrypt?"},{"location":"about/FAQ.html#3-how-can-i-contribute-to-the-project","text":"Read the CONTRIBUTING.md file for steps.","title":"3. How can I contribute to the project?"},{"location":"about/FAQ.html#4-how-do-i-report-a-bug-or-security-vulnerability","text":"See the SECURITY.md file for details on how to contact us securely.","title":"4. How do I report a bug or security vulnerability?"},{"location":"about/FAQ.html#5-what-are-the-future-plans-for-safecrypt","text":"Check out our ROADMAP.md for planned features!","title":"5. What are the future plans for SafeCrypt?"},{"location":"about/ROADMAP.html","text":"\ud83d\udee1\ufe0f SafeCrypt - Roadmap This document describes the features planned for future versions of the SafeCrypt library. \u2705 Release version: v1.0.0 [x] AESGCM message encryption and decryption [x] Error handling via the CryptoException class \u2705 Release version: v1.1.0 (Goal: Improved symmetric encryption) [x] Added the decryptCombined method to the AESGCM class \u2705 Current version: v1.2.0 \u2013 (Purpose: Adding RSA Asymmetric Encryption) [x] RSA Encryption (Public/Private Key) [x] RSA Key Generation (RSAKey) [x] RSA Key Saving/Loading (RSASave/RSALoad) [x] RSA Message Encryption & Decryption \u2705 Current version: v1.3.0 \u2013 Addition of new symmetric protocols [X] ChaCha20-Poly1305 encryption [X] ChaCha20 + Poly1305 MAC implementation [X] Documentation Fast and secure alternative to AES-GCM, ideal for mobile devices \ud83d\udea7 Version v1.4.0 \u2013 Added new symmetric protocols [ ] AES encryption [ ] ECB implementation [ ] CBC implementation [ ] CTR implementation \ud83d\udea7 Version v1.5.0 \u2013 Advanced Asymmetric Protocol and Signatures [ ] Elliptic Curve Cryptography (ECC) [ ] Support for common curves (secp256r1, secp256k1, ed25519) [ ] Key generation, lightweight encryption, digital signatures [ ] ECDSA (Elliptic Curve Digital Signature Algorithm) [ ] Signature and verification with elliptic curves [ ] EdDSA (Ed25519) [ ] Modern, fast, secure, and compact signature \ud83d\udccc Contribute Want to help? 1. Choose a \ud83d\udea7 task from the roadmap. 2. Create a dedicated branch on GitHub with a clear name that matches your task (e.g., feature/chacha20-poly1305 , bugfix/aes-gcm-decrypt ). 3. Implement your feature or fix. 4. Open a Pull Request (PR) from your branch to dev for review. Thanks for your contribution! \ud83d\ude80 \ud83e\uddea Automated Tests (TODO) [X] Add PHPUnit tests for all protocols [X] Add RSA tests [X] Add AES-GCM tests","title":"Roadmap"},{"location":"about/ROADMAP.html#safecrypt-roadmap","text":"This document describes the features planned for future versions of the SafeCrypt library.","title":"\ud83d\udee1\ufe0f SafeCrypt - Roadmap"},{"location":"about/ROADMAP.html#release-version-v100","text":"[x] AESGCM message encryption and decryption [x] Error handling via the CryptoException class","title":"\u2705 Release version: v1.0.0"},{"location":"about/ROADMAP.html#release-version-v110-goal-improved-symmetric-encryption","text":"[x] Added the decryptCombined method to the AESGCM class","title":"\u2705 Release version: v1.1.0 (Goal: Improved symmetric encryption)"},{"location":"about/ROADMAP.html#current-version-v120-purpose-adding-rsa-asymmetric-encryption","text":"[x] RSA Encryption (Public/Private Key) [x] RSA Key Generation (RSAKey) [x] RSA Key Saving/Loading (RSASave/RSALoad) [x] RSA Message Encryption & Decryption","title":"\u2705 Current version: v1.2.0 \u2013 (Purpose: Adding RSA Asymmetric Encryption)"},{"location":"about/ROADMAP.html#current-version-v130-addition-of-new-symmetric-protocols","text":"[X] ChaCha20-Poly1305 encryption [X] ChaCha20 + Poly1305 MAC implementation [X] Documentation Fast and secure alternative to AES-GCM, ideal for mobile devices","title":"\u2705 Current version: v1.3.0 \u2013 Addition of new symmetric protocols"},{"location":"about/ROADMAP.html#version-v140-added-new-symmetric-protocols","text":"[ ] AES encryption [ ] ECB implementation [ ] CBC implementation [ ] CTR implementation","title":"\ud83d\udea7 Version v1.4.0 \u2013 Added new symmetric protocols"},{"location":"about/ROADMAP.html#version-v150-advanced-asymmetric-protocol-and-signatures","text":"[ ] Elliptic Curve Cryptography (ECC) [ ] Support for common curves (secp256r1, secp256k1, ed25519) [ ] Key generation, lightweight encryption, digital signatures [ ] ECDSA (Elliptic Curve Digital Signature Algorithm) [ ] Signature and verification with elliptic curves [ ] EdDSA (Ed25519) [ ] Modern, fast, secure, and compact signature","title":"\ud83d\udea7 Version v1.5.0 \u2013 Advanced Asymmetric Protocol and Signatures"},{"location":"about/ROADMAP.html#contribute","text":"Want to help? 1. Choose a \ud83d\udea7 task from the roadmap. 2. Create a dedicated branch on GitHub with a clear name that matches your task (e.g., feature/chacha20-poly1305 , bugfix/aes-gcm-decrypt ). 3. Implement your feature or fix. 4. Open a Pull Request (PR) from your branch to dev for review. Thanks for your contribution! \ud83d\ude80","title":"\ud83d\udccc Contribute"},{"location":"about/ROADMAP.html#automated-tests-todo","text":"[X] Add PHPUnit tests for all protocols [X] Add RSA tests [X] Add AES-GCM tests","title":"\ud83e\uddea Automated Tests (TODO)"},{"location":"about/SECURITY.html","text":"Security Policy Vulnerability Reporting If you discover a vulnerability, please report it by creating a ticket directly on this repository. We ask that you clearly describe the vulnerability and provide steps to reproduce it. Your contributions will help us quickly resolve potential issues. You can send us video evidence of how you exploited the vulnerability by email. Email : tina.xytrfgthuji1348@gmail.com","title":"Security"},{"location":"about/SECURITY.html#security-policy","text":"","title":"Security Policy"},{"location":"about/SECURITY.html#vulnerability-reporting","text":"If you discover a vulnerability, please report it by creating a ticket directly on this repository. We ask that you clearly describe the vulnerability and provide steps to reproduce it. Your contributions will help us quickly resolve potential issues. You can send us video evidence of how you exploited the vulnerability by email. Email : tina.xytrfgthuji1348@gmail.com","title":"Vulnerability Reporting"},{"location":"about/contributing.html","text":"Contribute to SafeCrypt Thank you for wanting to contribute! Contribution Process Fork this repository Create a branch ( feature/my-new-feature ) Commit your changes Push your branch Open a Pull Request Coding Rules Respect the project style (php conventions) One feature = one Pull Request Provide unit tests if possible Standards Strict adherence to SOLID principles Clean code","title":"Contribute"},{"location":"about/contributing.html#contribute-to-safecrypt","text":"Thank you for wanting to contribute!","title":"Contribute to SafeCrypt"},{"location":"about/contributing.html#contribution-process","text":"Fork this repository Create a branch ( feature/my-new-feature ) Commit your changes Push your branch Open a Pull Request","title":"Contribution Process"},{"location":"about/contributing.html#coding-rules","text":"Respect the project style (php conventions) One feature = one Pull Request Provide unit tests if possible","title":"Coding Rules"},{"location":"about/contributing.html#standards","text":"Strict adherence to SOLID principles Clean code","title":"Standards"},{"location":"about/license.html","text":"MIT License Copyright (c) 2025 Tina Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"api/ChaCha20-Poly1305.html","text":"ChaCha20-Poly1305 SafeCrypt implements the ChaCha20-Poly1305 algorithm, a modern symmetric encryption protocol that provides security, speed, and resistance to side-channel attacks. \ud83d\udd10 Main features key generation encryption decryption Key size support: 256 bits \ud83e\uddf1 API - Classes and Methods Array Class 1 ChaCha20(string $key) 2 generated(int $size) 3 ChaCha20Load() 4 ChaCha20Save() Array method description 1 getCipherMethod() returns the encryption method 1 encrypt(string $plaintext, string $additionalData = '') allows data to be encrypted 1 decrypt(string $encryptedMessage, string $additionalData = '') allows data to be decrypted --- --- --- 2 generated(int $size) allows you to generate a key --- --- --- 3 load_key(string $fileName, string $directory = './keys') allows you to load a key --- --- --- 4 save_key(string $key, string $fileName, string $directory = './keys') allows you to save a key that has been generated \ud83d\ude80 Example Below I put a link allowing you to look at the code examples : example-ChaCha20-Poly1305 \u26a0\ufe0f Safety Notes Never expose the key. Always use a unique nonce per encryption. AAD ensures metadata integrity.","title":"ChaCha20-Poly1305"},{"location":"api/ChaCha20-Poly1305.html#chacha20-poly1305","text":"SafeCrypt implements the ChaCha20-Poly1305 algorithm, a modern symmetric encryption protocol that provides security, speed, and resistance to side-channel attacks.","title":"ChaCha20-Poly1305"},{"location":"api/ChaCha20-Poly1305.html#main-features","text":"key generation encryption decryption Key size support: 256 bits","title":"\ud83d\udd10 Main features"},{"location":"api/ChaCha20-Poly1305.html#api-classes-and-methods","text":"Array Class 1 ChaCha20(string $key) 2 generated(int $size) 3 ChaCha20Load() 4 ChaCha20Save() Array method description 1 getCipherMethod() returns the encryption method 1 encrypt(string $plaintext, string $additionalData = '') allows data to be encrypted 1 decrypt(string $encryptedMessage, string $additionalData = '') allows data to be decrypted --- --- --- 2 generated(int $size) allows you to generate a key --- --- --- 3 load_key(string $fileName, string $directory = './keys') allows you to load a key --- --- --- 4 save_key(string $key, string $fileName, string $directory = './keys') allows you to save a key that has been generated","title":"\ud83e\uddf1 API - Classes and Methods"},{"location":"api/ChaCha20-Poly1305.html#example","text":"Below I put a link allowing you to look at the code examples : example-ChaCha20-Poly1305","title":"\ud83d\ude80 Example"},{"location":"api/ChaCha20-Poly1305.html#safety-notes","text":"Never expose the key. Always use a unique nonce per encryption. AAD ensures metadata integrity.","title":"\u26a0\ufe0f Safety Notes"},{"location":"api/aes-gcm.html","text":"SafeCrypt - AES-GCM SafeCrypt implements the AES-GCM algorithm, a symmetric encryption protocol that allows for the secure encryption of very large data. \ud83d\udd10 Main features key generation encryption decryption Key size support: 256 bits \ud83e\uddf1 API - Classes and Methods Array Class 1 AESGCM(string $key) Array method description 1 encrypt(string $plaintext) allows you to encrypt data 1 decrypt(string $ciphertext, string $iv, string $tag) allows you to decrypt data 1 decryptCombined(string $combinedData) makes decrypting data much easier \ud83d\ude80 Example Below I put a link allowing you to look at the code examples : example-aes-gcm \u26a0\ufe0f Safety Notes Never expose the key.","title":"AES-GCM"},{"location":"api/aes-gcm.html#safecrypt-aes-gcm","text":"SafeCrypt implements the AES-GCM algorithm, a symmetric encryption protocol that allows for the secure encryption of very large data.","title":"SafeCrypt - AES-GCM"},{"location":"api/aes-gcm.html#main-features","text":"key generation encryption decryption Key size support: 256 bits","title":"\ud83d\udd10 Main features"},{"location":"api/aes-gcm.html#api-classes-and-methods","text":"Array Class 1 AESGCM(string $key) Array method description 1 encrypt(string $plaintext) allows you to encrypt data 1 decrypt(string $ciphertext, string $iv, string $tag) allows you to decrypt data 1 decryptCombined(string $combinedData) makes decrypting data much easier","title":"\ud83e\uddf1 API - Classes and Methods"},{"location":"api/aes-gcm.html#example","text":"Below I put a link allowing you to look at the code examples : example-aes-gcm","title":"\ud83d\ude80 Example"},{"location":"api/aes-gcm.html#safety-notes","text":"Never expose the key.","title":"\u26a0\ufe0f Safety Notes"},{"location":"api/rsa.html","text":"SafeCrypt - RSA SafeCrypt implements the RSA algorithm, an asymmetric encryption protocol based on a public/private key pair. This mechanism allows the secure exchange of sensitive data (such as an AES key), even over unencrypted channels such as HTTP. Using RSA, two clients (PCs) can securely exchange an AES session key without the key being compromised by network interception. \ud83d\udd10 Main features RSA key pair generation (public key/private key) Public key encryption Private key decryption Key export/import in text format (Base64 or PEM) Key size support: 1024 bits \ud83e\uddf1 API - Classes and Methods Array Class 1 RSA(string $public_key, string $private_key) 2 RSAKey() 3 RSALoad() 4 RSASave() Array method description 1 encrypt(string $data) allows you to encrypt data 1 decrypt(string $encryptedBase64) allows you to decrypt data --- --- --- 2 generated(int $keySize = 1024) allows you to generate a private/public key --- --- --- 3 load_key(array $options) allows you to load a private/public key --- --- --- 4 save_key(string $publicKey, string $privateKey, string $directory = './keys') method to save private keys and generated public key \ud83d\ude80 Example Below I put a link allowing you to look at the code examples : example-rsa \u26a0\ufe0f Safety Notes Never expose the private key. RSA is only used for symmetric key exchange (e.g., AES), not for encrypting large files. Preferably, use AES-GCM or ChaCha20 for data encryption after the key exchange.","title":"RSA"},{"location":"api/rsa.html#safecrypt-rsa","text":"SafeCrypt implements the RSA algorithm, an asymmetric encryption protocol based on a public/private key pair. This mechanism allows the secure exchange of sensitive data (such as an AES key), even over unencrypted channels such as HTTP. Using RSA, two clients (PCs) can securely exchange an AES session key without the key being compromised by network interception.","title":"SafeCrypt - RSA"},{"location":"api/rsa.html#main-features","text":"RSA key pair generation (public key/private key) Public key encryption Private key decryption Key export/import in text format (Base64 or PEM) Key size support: 1024 bits","title":"\ud83d\udd10 Main features"},{"location":"api/rsa.html#api-classes-and-methods","text":"Array Class 1 RSA(string $public_key, string $private_key) 2 RSAKey() 3 RSALoad() 4 RSASave() Array method description 1 encrypt(string $data) allows you to encrypt data 1 decrypt(string $encryptedBase64) allows you to decrypt data --- --- --- 2 generated(int $keySize = 1024) allows you to generate a private/public key --- --- --- 3 load_key(array $options) allows you to load a private/public key --- --- --- 4 save_key(string $publicKey, string $privateKey, string $directory = './keys') method to save private keys and generated public key","title":"\ud83e\uddf1 API - Classes and Methods"},{"location":"api/rsa.html#example","text":"Below I put a link allowing you to look at the code examples : example-rsa","title":"\ud83d\ude80 Example"},{"location":"api/rsa.html#safety-notes","text":"Never expose the private key. RSA is only used for symmetric key exchange (e.g., AES), not for encrypting large files. Preferably, use AES-GCM or ChaCha20 for data encryption after the key exchange.","title":"\u26a0\ufe0f Safety Notes"},{"location":"example/ChaCha20-Poly1305.html","text":"ChaCha20-Poly1305 Example <?php declare(strict_types=1); require_once __DIR__ . '/vendor/autoload.php'; use SafeCrypt\\Protocole\\ChaCha20; use SafeCrypt\\Protocole\\ChaCha20Key; use SafeCrypt\\Protocole\\ChaCha20Load; use SafeCrypt\\Protocole\\ChaCha20Save; use SafeCrypt\\Exceptions\\CryptoException; $keyDir = __DIR__ . '/keys'; $keyFileName = 'chacha20_key.pem'; $keyPath = $keyDir . DIRECTORY_SEPARATOR . $keyFileName; if (!file_exists($keyDir)){ mkdir($keyDir, 0700, true); } try{ if (file_exists($keyPath)){ $keyLoader = new ChaCha20Load(); $key = $keyLoader->load_key($keyFileName, $keyDir); }else{ $keyGen = new ChaCha20Key(); $key = $keyGen->generated(32); $keySaver = new ChaCha20Save(); $keySaver->save_key($key, $keyFileName, $keyDir); } $chacha = new ChaCha20($key); }catch (CryptoException $e){ exit(\"Crypto error during setup: \" . $e->getMessage() . PHP_EOL); }catch (\\Exception $e){ exit(\"General error during setup: \" . $e->getMessage() . PHP_EOL); } echo \"Setup ChaCha20 ready\\n\"; // ----------- Encrypt/Decrypt ----------- $message = \"My secret message for ChaCha20-Poly1305.\"; $aad = \"userID:123,timestamp:\" . time(); $encrypted = $chacha->encrypt($message, $aad); $decrypted = $chacha->decrypt($encrypted, $aad); echo \"\\n--- Test Encrypt/Decrypt ---\\n\"; echo \"Encrypted (base64): \" . base64_encode($encrypted) . PHP_EOL; echo \"Decrypted: \" . $decrypted . PHP_EOL; echo $decrypted === $message ? \"Success\\n\" : \"Failure\\n\";","title":"ChaCha20-Poly1305"},{"location":"example/ChaCha20-Poly1305.html#chacha20-poly1305-example","text":"<?php declare(strict_types=1); require_once __DIR__ . '/vendor/autoload.php'; use SafeCrypt\\Protocole\\ChaCha20; use SafeCrypt\\Protocole\\ChaCha20Key; use SafeCrypt\\Protocole\\ChaCha20Load; use SafeCrypt\\Protocole\\ChaCha20Save; use SafeCrypt\\Exceptions\\CryptoException; $keyDir = __DIR__ . '/keys'; $keyFileName = 'chacha20_key.pem'; $keyPath = $keyDir . DIRECTORY_SEPARATOR . $keyFileName; if (!file_exists($keyDir)){ mkdir($keyDir, 0700, true); } try{ if (file_exists($keyPath)){ $keyLoader = new ChaCha20Load(); $key = $keyLoader->load_key($keyFileName, $keyDir); }else{ $keyGen = new ChaCha20Key(); $key = $keyGen->generated(32); $keySaver = new ChaCha20Save(); $keySaver->save_key($key, $keyFileName, $keyDir); } $chacha = new ChaCha20($key); }catch (CryptoException $e){ exit(\"Crypto error during setup: \" . $e->getMessage() . PHP_EOL); }catch (\\Exception $e){ exit(\"General error during setup: \" . $e->getMessage() . PHP_EOL); } echo \"Setup ChaCha20 ready\\n\"; // ----------- Encrypt/Decrypt ----------- $message = \"My secret message for ChaCha20-Poly1305.\"; $aad = \"userID:123,timestamp:\" . time(); $encrypted = $chacha->encrypt($message, $aad); $decrypted = $chacha->decrypt($encrypted, $aad); echo \"\\n--- Test Encrypt/Decrypt ---\\n\"; echo \"Encrypted (base64): \" . base64_encode($encrypted) . PHP_EOL; echo \"Decrypted: \" . $decrypted . PHP_EOL; echo $decrypted === $message ? \"Success\\n\" : \"Failure\\n\";","title":"ChaCha20-Poly1305 Example"},{"location":"example/aes-gcm.html","text":"AES-GCM Example Encrypting & decrypting a message : <?php require_once __DIR__ . '/vendor/autoload.php'; use SafeCrypt\\Protocole\\AESGCM; if(file_exists(\"./aes_key.txt\") != true){ $key = random_bytes(32); file_put_contents('aes_key.txt', base64_encode($key)); } $keyFromFile = base64_decode(file_get_contents('aes_key.txt')); $aes = new AESGCM($keyFromFile); $data = \"Message secret\"; try { $encrypted = $aes->encrypt($data); echo \"Ciphertext (base64) : \" . $encrypted['ciphertext'] . PHP_EOL; echo \"IV (base64) : \" . $encrypted['iv'] . PHP_EOL; echo \"Tag (base64) : \" . $encrypted['tag'] . \"\\n\". PHP_EOL; } catch (Exception $e) { echo \"Erreur d'encrypt : \" . $e->getMessage() . PHP_EOL; exit(1); } //------- //$decrypted = $aes->decrypt($encrypted['ciphertext'], $encrypted['iv'], $encrypted['tag']); //or $str = $encrypted['ciphertext'].$encrypted['iv'].$encrypted['tag']; $decrypted = $aes->decryptCombined($str); //----- echo \"Decipher : \" . $decrypted . PHP_EOL; // php test.php File encryption & decryption : <?php require_once __DIR__ . '/vendor/autoload.php'; use SafeCrypt\\Protocole\\AESGCM; $file_key = \"aes_key.txt\"; $original_file = \"PMS.pdf\"; // PMS.pdf $encrypted_file = $original_file.\".lock\"; // PMS.pdf.lock if(!file_exists(\"./\".$file_key)){ $key = random_bytes(32); file_put_contents($file_key, base64_encode($key)); } $keyFromFile = base64_decode(file_get_contents($file_key)); $aes = new AESGCM($keyFromFile); if(!file_exists($original_file)){ $data = file_get_contents($encrypted_file); $decrypted = $aes->decryptCombined($data); file_put_contents($original_file, $decrypted, FILE_APPEND | LOCK_EX); unlink($encrypted_file); exit(0); } $data = file_get_contents($original_file); $encrypted = $aes->encrypt($data); file_put_contents($encrypted_file, $encrypted['ciphertext'].$encrypted['iv'].$encrypted['tag'], FILE_APPEND | LOCK_EX); unlink($original_file); // php test.php","title":"AES-GCM"},{"location":"example/aes-gcm.html#aes-gcm-example","text":"","title":"AES-GCM Example"},{"location":"example/aes-gcm.html#encrypting-decrypting-a-message","text":"<?php require_once __DIR__ . '/vendor/autoload.php'; use SafeCrypt\\Protocole\\AESGCM; if(file_exists(\"./aes_key.txt\") != true){ $key = random_bytes(32); file_put_contents('aes_key.txt', base64_encode($key)); } $keyFromFile = base64_decode(file_get_contents('aes_key.txt')); $aes = new AESGCM($keyFromFile); $data = \"Message secret\"; try { $encrypted = $aes->encrypt($data); echo \"Ciphertext (base64) : \" . $encrypted['ciphertext'] . PHP_EOL; echo \"IV (base64) : \" . $encrypted['iv'] . PHP_EOL; echo \"Tag (base64) : \" . $encrypted['tag'] . \"\\n\". PHP_EOL; } catch (Exception $e) { echo \"Erreur d'encrypt : \" . $e->getMessage() . PHP_EOL; exit(1); } //------- //$decrypted = $aes->decrypt($encrypted['ciphertext'], $encrypted['iv'], $encrypted['tag']); //or $str = $encrypted['ciphertext'].$encrypted['iv'].$encrypted['tag']; $decrypted = $aes->decryptCombined($str); //----- echo \"Decipher : \" . $decrypted . PHP_EOL; // php test.php","title":"Encrypting &amp; decrypting a message :"},{"location":"example/aes-gcm.html#file-encryption-decryption","text":"<?php require_once __DIR__ . '/vendor/autoload.php'; use SafeCrypt\\Protocole\\AESGCM; $file_key = \"aes_key.txt\"; $original_file = \"PMS.pdf\"; // PMS.pdf $encrypted_file = $original_file.\".lock\"; // PMS.pdf.lock if(!file_exists(\"./\".$file_key)){ $key = random_bytes(32); file_put_contents($file_key, base64_encode($key)); } $keyFromFile = base64_decode(file_get_contents($file_key)); $aes = new AESGCM($keyFromFile); if(!file_exists($original_file)){ $data = file_get_contents($encrypted_file); $decrypted = $aes->decryptCombined($data); file_put_contents($original_file, $decrypted, FILE_APPEND | LOCK_EX); unlink($encrypted_file); exit(0); } $data = file_get_contents($original_file); $encrypted = $aes->encrypt($data); file_put_contents($encrypted_file, $encrypted['ciphertext'].$encrypted['iv'].$encrypted['tag'], FILE_APPEND | LOCK_EX); unlink($original_file); // php test.php","title":"File encryption &amp; decryption :"},{"location":"example/rsa.html","text":"RSA Example <?php require_once __DIR__ . '/vendor/autoload.php'; use SafeCrypt\\Protocole\\RSA; use SafeCrypt\\Protocole\\RSAKey; use SafeCrypt\\Protocole\\RSASave; use SafeCrypt\\Exceptions\\CryptoException; $keyDir = __DIR__ . '/keys'; $publicPath = $keyDir . '/public.pem'; $privatePath = $keyDir . '/private.pem'; try { // checking the existence of keys if (file_exists($publicPath) && file_exists($privatePath)){ echo \"loading...\\n\"; // loading keys if they exist $publicKey = file_get_contents($publicPath); $privateKey = file_get_contents($privatePath); }else{ echo \"generation of keys...\\n\"; // generation of keys if they are missing $keyGen = new RSAKey(); $keys = $keyGen->generated(1024); // key backup $save = new RSASave(); $save->save_key($keys['public'], $keys['private'], $keyDir); $publicKey = $keys['public']; $privateKey = $keys['private']; } // encryption decryption $rsa = new RSA($publicKey, $privateKey); $encrypted = $rsa->encrypt(\"My secret message\"); echo \"Encrypted : $encrypted\\n\"; $decrypted = $rsa->decrypt($encrypted); echo \"Decrypted : $decrypted\\n\"; }catch (CryptoException $e){ echo \"Error Crypto : \" . $e->getMessage() . \"\\n\"; }catch (\\Exception $e){ echo \"General Error : \" . $e->getMessage() . \"\\n\"; } // php test_rsa.php","title":"RSA"},{"location":"example/rsa.html#rsa-example","text":"<?php require_once __DIR__ . '/vendor/autoload.php'; use SafeCrypt\\Protocole\\RSA; use SafeCrypt\\Protocole\\RSAKey; use SafeCrypt\\Protocole\\RSASave; use SafeCrypt\\Exceptions\\CryptoException; $keyDir = __DIR__ . '/keys'; $publicPath = $keyDir . '/public.pem'; $privatePath = $keyDir . '/private.pem'; try { // checking the existence of keys if (file_exists($publicPath) && file_exists($privatePath)){ echo \"loading...\\n\"; // loading keys if they exist $publicKey = file_get_contents($publicPath); $privateKey = file_get_contents($privatePath); }else{ echo \"generation of keys...\\n\"; // generation of keys if they are missing $keyGen = new RSAKey(); $keys = $keyGen->generated(1024); // key backup $save = new RSASave(); $save->save_key($keys['public'], $keys['private'], $keyDir); $publicKey = $keys['public']; $privateKey = $keys['private']; } // encryption decryption $rsa = new RSA($publicKey, $privateKey); $encrypted = $rsa->encrypt(\"My secret message\"); echo \"Encrypted : $encrypted\\n\"; $decrypted = $rsa->decrypt($encrypted); echo \"Decrypted : $decrypted\\n\"; }catch (CryptoException $e){ echo \"Error Crypto : \" . $e->getMessage() . \"\\n\"; }catch (\\Exception $e){ echo \"General Error : \" . $e->getMessage() . \"\\n\"; } // php test_rsa.php","title":"RSA Example"}]}